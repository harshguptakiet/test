# Compose for production deployment
# - Uses Postgres instead of SQLite
# - No localhost references; uses env for public URLs
# - Redis internal; backend/worker talk to Redis and Postgres over the compose network
# - Frontend built with NEXT_PUBLIC_* values baked in

services:
  postgres:
    image: postgres:16-alpine
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    volumes:
      - pg_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - curagenie-network
    restart: unless-stopped

  redis:
    image: redis:7-alpine
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - curagenie-network
    restart: unless-stopped

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: production
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      - PYTHONPATH=/app
      - PYTHONDONTWRITEBYTECODE=1
      - PYTHONUNBUFFERED=1
      - DATABASE_URL=${DATABASE_URL}
      - PORT=8000
      - DEBUG=${DEBUG:-false}

      - ENVIRONMENT=production
      - SECRET_KEY=${SECRET_KEY}
      - CORS_ORIGINS=${CORS_ORIGINS}
      - CORS_ALLOW_CREDENTIALS=true
      - MAX_FILE_SIZE_MB=100
      - UPLOADS_DIR=/app/data/uploads
      - ENABLE_REAL_GENOMIC_ANALYSIS=${ENABLE_REAL_GENOMIC_ANALYSIS:-true}
      - ENABLE_ENHANCED_MRI=${ENABLE_ENHANCED_MRI:-false}
      - ENABLE_ML=${ENABLE_ML:-false}
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      - LOG_LEVEL=${LOG_LEVEL:-INFO}

      - OMP_NUM_THREADS=1
      - TF_NUM_INTRAOP_THREADS=1
      - TF_NUM_INTEROP_THREADS=1
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_REGION=${AWS_REGION}
      - S3_BUCKET_NAME=${S3_BUCKET_NAME}
    volumes:
      - backend_uploads:/app/data/uploads
      - backend_logs:/app/logs
    networks:
      - curagenie-network
    # Do not expose backend directly if you place a reverse proxy in front
    ports:
      - "${BACKEND_PORT:-8000}:8000"
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; requests.get('http://localhost:8000/health', timeout=5)"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 15s

  worker:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: production
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      - PYTHONPATH=/app
      - PYTHONDONTWRITEBYTECODE=1
      - PYTHONUNBUFFERED=1
      - DATABASE_URL=${DATABASE_URL}
      - DEBUG=${DEBUG:-false}
      - ENVIRONMENT=production
      - SECRET_KEY=${SECRET_KEY}
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      - ENABLE_REAL_GENOMIC_ANALYSIS=${ENABLE_REAL_GENOMIC_ANALYSIS:-true}
      - ENABLE_ENHANCED_MRI=${ENABLE_ENHANCED_MRI:-false}
      - ENABLE_ML=${ENABLE_ML:-false}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - OMP_NUM_THREADS=1
      - TF_NUM_INTRAOP_THREADS=1
      - TF_NUM_INTEROP_THREADS=1
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_REGION=${AWS_REGION}
      - S3_BUCKET_NAME=${S3_BUCKET_NAME}
    command: ["python", "cg_worker/worker.py"]
    networks:
      - curagenie-network
    restart: unless-stopped

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: runner
      args:
        NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL}
        NEXT_PUBLIC_WS_URL: ${NEXT_PUBLIC_WS_URL}
    depends_on:
      backend:
        condition: service_healthy
    environment:
      - NODE_ENV=production
      - NEXT_TELEMETRY_DISABLED=1
      - PORT=3000
      - HOSTNAME=0.0.0.0
    networks:
      - curagenie-network
    ports:
      - "${FRONTEND_PORT:-3000}:3000"
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

networks:
  curagenie-network:
    driver: bridge
    name: curagenie-network

volumes:
  pg_data:
  backend_uploads:
  backend_logs:

